#include "shounrf24l01.h"
char sta,count,tf;
char  TX_ADDRESS[TX_ADR_WIDTH]= {0x34,0x43,0x10,0x10,0x01}; 
//本地地址 
char  RX_ADDRESS[RX_ADR_WIDTH]= {0x34,0x43,0x10,0x10,0x01}; 
//接收地址
void Delay(int s) 
{ 
	unsigned int i; 
	for(i=0; i<s; i++); 
	for(i=0; i<s; i++);
} 

//函数：uint SPI_RW(uint uchar) 
//功能：NRF24L01的SPI写时序  *************************/ 
char SPI_RW(char data) 
{  
char i,temp=0;      
for(i=0;i<8;i++) // output 8-bit     
{   
if(data & 0x80)   
{    
Hign_24L01_MOSI;          		// output 'uchar', MSB to MOSI   
}   
else   
{    
Low_24L01_MOSI;    
}    
data = (data << 1);            // shift next bit into MSB..   
temp<<=1;   
Hign_24L01_SCK;                 // Set SCK high..   
if(PINB&0x10){temp++;}           // capture current MISO bfit   
Low_24L01_SCK;                 // ..then set SCK low again     
}     
return(temp);        		   // return read uchar 
}  
/***
//函数：uchar SPI_Read(uchar reg)
 //功能：NRF24L01的SPI时序  ******************/ 
 
char SPI_Read(char reg) 
{  
char reg_val;
Low_24L01_CSN;                // CSN low, initialize SPI communication...  
SPI_RW(reg);            // Select register to read from..  
reg_val = SPI_RW(0);    	// ..then read registervalue  
Hign_24L01_CSN;                // CSN high, terminate SPI communication    
return(reg_val);        // return register value 
} 
 /***************  //功能：NRF24L01读写寄存器函数  ********************/  
char SPI_RW_Reg(char reg, char value) 
{  
char status;
Low_24L01_CSN;                   // CSN low, init SPI transaction  
status = SPI_RW(reg);      // select register  
SPI_RW(value);             // ..and write value to it..  
Hign_24L01_CSN;            // CSN high again    
return(status);            // return nRF24L01 status uchar 
}  /****************************************  
//函数：uint SPI_Read_Buf(uchar reg, uchar *pBuf, uchar uchars)  
//功能: 用于读数据，reg：为寄存器地址，pBuf：为待读出数据地址，uchars：读出数据的个数  ******************/  
char SPI_Read_Buf(char reg, char *pBuf, char uchars) 
{  
int status1,uchar_ctr;
Low_24L01_CSN;                      // Set CSN low, init SPI tranaction  
status1 = SPI_RW(reg);         // Select register to write to and read status uchar
for(uchar_ctr=0;uchar_ctr<uchars;uchar_ctr++) 
pBuf[uchar_ctr] = SPI_RW(0);    //     
Hign_24L01_CSN;                               
return(status1);                    // return nRF24L01 status uchar 
}  /**************************************************************  
//函数：uint SPI_Write_Buf(uchar reg, uchar *pBuf, uchar uchars)  
//功能: 用于写数据：为寄存器地址，pBuf：为待写入数据地址，uchars：写入数据的个数 ***********************/  
char SPI_Write_Buf(char reg, char *pBuf, char uchars) 
{  
char status1,uchar_ctr;    
Low_24L01_CSN;             //SPI使能  
status1 = SPI_RW(reg);     
for(uchar_ctr=0; uchar_ctr<uchars; uchar_ctr++) 
//  
SPI_RW(*pBuf++);  
Hign_24L01_CSN;           //关闭SPI  
return(status1); 
}  /************************  
功能：数据接收配置   ********************************************/ 
void SetRX_Mode(void) 
{  
Low_24L01_CE;
SPI_RW_Reg(WRITE_REG + CONFIG, 0x0f);     // IRQ收发完成中断响应，16位CRC ，主接收  
Hign_24L01_CE; 
Delay(2000);			  //注意不能太小 
}  
/*****************************************************  
//函数：unsigned char nRF24L01_RxPacket(unsigned char* rx_buf) 
//功能：数据读取后放如rx_buf接收缓冲区中  ************/

char nRF24L01_RxPacket(char* rx_buf) 
{      
char revale=0;  
sta=SPI_Read(STATUS);      // 读取状态寄存其来判断数据接收状况    
if(sta&0x40)                 // 判断是否接收到数据  
{     
Low_24L01_CE;    //SPI使能   
SPI_Read_Buf(RD_RX_PLOAD,rx_buf,TX_PLOAD_WIDTH);// 读接受到的数据从RX_FIFO buffer   
revale =1;   //读取数据完成标志  
}  
SPI_RW_Reg(WRITE_REG+STATUS,sta);   //接收到数据后RX_DR,TX_DS,MAX_PT都置高为1，通过写1来清除中断标志  
return revale; 
}  
/**********************************************  
//函数：void nRF24L01_TxPacket(char * tx_buf) 
//功能：发送 tx_buf中数据  ****************************************/  
/*void nRF24L01_TxPacket(char * tx_buf) 
{  
Low_24L01_CE;   //StandBy I模式   
SPI_Write_Buf(WRITE_REG + RX_ADDR_P0, TX_ADDRESS, TX_ADR_WIDTH); 
// 装载接收端地址     
SPI_Write_Buf(WR_TX_PLOAD, tx_buf, TX_PLOAD_WIDTH);     
// 装载数据   
SPI_RW_Reg(WRITE_REG + CONFIG, 0x0e);      
// IRQ收发完成中断响应，16位CRC，主发送  
Hign_24L01_CE;   
//置高CE，激发数据发送  
Delay(600); 
} */ 
/********\**************************************/

//NRF24L01初始化  *****************************************************/  
void init_NRF24L01(void) 
{    
Low_24L01_CE;    // chip enable   
Hign_24L01_CSN;   // Spi disable     
Low_24L01_SCK;   // Spi clock line init high
//SPI_Write_Buf(WRITE_REG + TX_ADDR,  RX_ADDRESS, RX_ADR_WIDTH);    // 写本地地址   
SPI_Write_Buf(WRITE_REG + RX_PW_P0, RX_ADDRESS,RX_ADR_WIDTH); // 写接收端地址  
SPI_RW_Reg(WRITE_REG + EN_AA, 0x01);      //  频道0自动 ACK应答允许   
SPI_RW_Reg(WRITE_REG + EN_RXADDR, 0x01);  //  允许接收地址只有频道0，如果需要多频道可以参考Page21    
SPI_RW_Reg(WRITE_REG + RF_CH,3);        //   设置信道工作为2.4GHZ，收发必须一致  
SPI_RW_Reg(WRITE_REG + RX_PW_P0, RX_PLOAD_WIDTH); //设置接收数据长度，本次设置为32字节  
SPI_RW_Reg(WRITE_REG + RF_SETUP, 0x07);    //设置发射速率为1MHZ，发射功率为最大值0dB  
SPI_RW_Reg(WRITE_REG + CONFIG, 0x0f);     // IRQ收发完成中断响应，16位CRC ，主接收     
Delay(6000);

}