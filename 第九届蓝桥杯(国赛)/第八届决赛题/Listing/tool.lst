C51 COMPILER V9.54   TOOL                                                                  05/20/2018 12:05:31 PAGE 1   


C51 COMPILER V9.54, COMPILATION OF MODULE TOOL
OBJECT MODULE PLACED IN ..\Output\tool.obj
COMPILER INVOKED BY: E:\Keil\Keil_v5\C51\BIN\C51.EXE ..\App\tool.c OPTIMIZE(8,SPEED) BROWSE INCDIR(..\App;..\Drivers) DE
                    -BUG OBJECTEXTEND PRINT(..\Listing\tool.lst) OBJECT(..\Output\tool.obj)

line level    source

   1          #include "tool.h"
   2          
   3          /* 函数声明 */
   4          void Task_Init(void);
   5          void Task_Work(void);
   6          void Task_LED(void);
   7          void Task_DAC(void);
   8          void Task_Display(void);
   9          void Task_Read(void);
  10          void Task_Write(void);
  11          void Task_Time(void);
  12          
  13          static void Board_Init(void);
  14          static void Task_C(void);
  15          static void Task_B(void);
  16          static void Task_F(void);
  17          
  18          
  19          /* 变量声明 */
  20          struct{
  21              uchar dat[4];       //4次测试的数据
  22              uchar last;         //上次的数据
  23              uchar now;          //现在的数据
  24              uchar cnt;          //数据的位置
  25              uchar set;          //设置的数值
  26          } sonic;                //测试得到的距离
  27          
  28          enum{
  29              mod_c = 0,          //测距模式
  30              mod_b = 1,          //数据回显模式
  31              mod_f = 3           //设置模式
  32          } mode;                 //工作模式
  33          
  34          uchar led_sta = 0xff;   //LED状态
  35          
  36          uchar led_flash;        //LED闪烁计数
  37          
  38          
  39          /* 初始化 */
  40          void Task_Init(void)
  41          {
  42   1          EA = 0;
  43   1          Board_Init();       //关掉板子上无关外设
  44   1          timer0_init();      //定时器初始化
  45   1          timer1_init();
  46   1          timer2_init();
  47   1          EA = 1;
  48   1      }
  49          
  50          
  51          /* 工作模式 */
  52          void Task_Work(void)
  53          {
  54   1          switch(mode)
C51 COMPILER V9.54   TOOL                                                                  05/20/2018 12:05:31 PAGE 2   

  55   1          {
  56   2              case mod_c:Task_C();break;//测距模式
  57   2              case mod_b:Task_B();break;//数据回显模式
  58   2              case mod_f:Task_F();break;//设置模式
  59   2          }
  60   1      }
  61          
  62          
  63          /* 设置LED */
  64          void Task_LED(void)
  65          {
  66   1          XBYTE[0x8000] = led_sta;
  67   1      }
  68          
  69          
  70          /* 电压输出 */
  71          void Task_DAC(void)
  72          {
  73   1          if(sonic.now <= sonic.set)        //S<=S0
  74   1              dac_write(0);
  75   1          else                            //S>S0
  76   1              dac_write((sonic.now-sonic.set)*255/5*0.02);
  77   1      }
  78          
  79          
  80          /* 显示 */
  81          void Task_Display(void)
  82          {
  83   1          switch(mode)
  84   1          {
  85   2              case mod_c://测距模式
  86   2                  display_c(sonic.last,sonic.now);
  87   2              break;
  88   2              
  89   2              case mod_b://数据回显模式
  90   2                  display_b(sonic.cnt,sonic.dat[sonic.cnt]);
  91   2              break;
  92   2              
  93   2              case mod_f://设置模式
  94   2                  display_f(sonic.set);
  95   2              break;
  96   2          }
  97   1      }
  98          
  99          
 100          /* 读出EEPROM上的数据 */
 101          void Task_Read(void)
 102          {
 103   1          sonic.dat[sonic.cnt] = at24c02_read(sonic.cnt);
 104   1      }
 105          
 106          
 107          /* 数据写进EEPROM */
 108          void Task_Write(void)
 109          {
 110   1          at24c02_write(0,11);
 111   1      }
 112          
 113          
 114          /* 关闭板子上无关外设 */
 115          static void Board_Init(void)
 116          {
C51 COMPILER V9.54   TOOL                                                                  05/20/2018 12:05:31 PAGE 3   

 117   1          XBYTE[0X8000] = 0XFF;
 118   1          XBYTE[0XA000] = 0X00;
 119   1          XBYTE[0XC000] = 0XFF;
 120   1          XBYTE[0XE000] = 0XFF;
 121   1      }
 122          
 123          
 124          /* 测距模式 */
 125          static void Task_C(void)
 126          {
 127   1          uchar key_num;
 128   1          key_num = key_scanf();                  //按键按下事件
 129   1          if(key_num == S4_ON)                    //按下S4
 130   1          {
 131   2              sonic.dat[sonic.cnt] = sonic_get(); //读出距离
 132   2              led_flash = 3;                      //LED闪烁3次
 133   2              sonic.last = sonic.now;             //上次的数据
 134   2              sonic.now = sonic.dat[sonic.cnt];   //现在的数据
 135   2              if(++sonic.cnt >= 4)                //数据的位置
 136   2                  sonic.cnt = 0;
 137   2          }
 138   1          else if(key_num == S5_ON)               //按下S5
 139   1          {
 140   2              mode = mod_b;                       //切换到回显模式
 141   2              sonic.cnt = 0;                      //数据指向第一个
 142   2          }
 143   1          else if(key_num == S6_ON)               //按下S6
 144   1              mode = mod_f;                       //切换到设置模式
 145   1      }
 146          
 147          
 148          /* 回显模式 */
 149          static void Task_B(void)
 150          {
 151   1          uchar key_num;
 152   1          led_sta &= ~(1<<7);                     //此模式下量的灯
 153   1          key_num = key_scanf();                  //按键按下事件
 154   1          if(key_num == S5_ON)                    //按下S5
 155   1          {
 156   2              mode = mod_c;                       //切换到显示模式
 157   2              led_sta |= (1<<7);                  //关灯
 158   2          }
 159   1          else if(key_num == S6_ON)               //按下S6
 160   1          {
 161   2              mode = mod_f;                       //切换到设置模式
 162   2              led_sta |= (1<<7);                  //关灯
 163   2          }
 164   1          else if(key_num == S7_ON)               //按下S7
 165   1              if(++sonic.cnt >= 4)                //翻页
 166   1                  sonic.cnt = 0;
 167   1      }
 168          
 169          
 170          /* 设置模式 */
 171          static void Task_F(void)
 172          {
 173   1          uchar key_num;
 174   1          led_sta &= ~(1<<6);                     //开灯
 175   1          key_num = key_scanf();                  //按键按下事件
 176   1          if(key_num == S5_ON)                    //按下S5
 177   1          {
 178   2              mode = mod_b;                       //切换到回显模式
C51 COMPILER V9.54   TOOL                                                                  05/20/2018 12:05:31 PAGE 4   

 179   2              led_sta |= (1<<6);                  //关灯
 180   2          }
 181   1          else if(key_num == S6_ON)               //按下S6
 182   1          {
 183   2              mode = mod_c;                       //切换到显示模式
 184   2              led_sta |= (1<<6);                  //关灯
 185   2          }
 186   1          else if(key_num == S7_ON)               //按下S7
 187   1          {
 188   2              if((sonic.set += 10) > 30)          //设置盲区
 189   2                  sonic.set = 0;
 190   2          }
 191   1          
 192   1      }
 193          
 194          
 195          void Task_Time(void)
 196          {
 197   1          static uint count;
 198   1          if(led_flash)                           //LED闪烁
 199   1          {
 200   2              if(count++>25000)                   //计数
 201   2              {
 202   3                  count = 0;
 203   3                  led_flash--;
 204   3              }
 205   2              else if(count >12500)
 206   2                  led_sta |= 1;
 207   2              else
 208   2                  led_sta &= ~1;
 209   2          }
 210   1          else
 211   1              led_sta |= 1;
 212   1      }


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    398    ----
   CONSTANT SIZE    =   ----    ----
   XDATA SIZE       =   ----    ----
   PDATA SIZE       =   ----    ----
   DATA SIZE        =     13       1
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
