C51 COMPILER V9.54   MAIN                                                                  03/19/2018 16:55:19 PAGE 1   


C51 COMPILER V9.54, COMPILATION OF MODULE MAIN
OBJECT MODULE PLACED IN ..\Output\main.obj
COMPILER INVOKED BY: E:\Keil\Keil_v5\C51\BIN\C51.EXE ..\App\main.c OPTIMIZE(8,SPEED) BROWSE INCDIR(..\Drivers;..\App) DE
                    -BUG OBJECTEXTEND PRINT(..\Listing\main.lst) OBJECT(..\Output\main.obj)

line level    source

   1          #include "ds18b20.h"
   2          #include "ds1302.h"
   3          #include "key.h"
   4          #include "smg.h"
   5          
   6          /*变量声明*/
   7          bit key_flag;
   8          bit led_flash_flag;
   9          uchar tpbuf;
  10          uchar check_mode;
  11          uchar smg_flash;
  12          
  13          struct{
  14              uchar val_count;
  15              uchar val[5];
  16              uchar max;
  17              uchar min;
  18              uchar now;
  19          }tempurter;
  20          
  21          struct{
  22              uchar hour;
  23              uchar min;
  24              uchar sec;
  25          }n_time, w_time, e_time;
  26          
  27          enum {
  28              mode_dis_time   = 0,
  29              mode_worring    = 1,
  30              mode_error      = 2,
  31              mode_dis_temp   = 3,
  32              mode_set_temp   = 4
  33          }mode = mode_dis_time;
  34          
  35          /*函数声明*/
  36          void init(void);
  37          void borad_init(void);
  38          void tim_init(void);
  39          void TaskDisTime(void);
  40          void TaskWorring(void);
  41          void TaskError(void);
  42          void TaskDisTemp(void);
  43          void TaskSetTemp(void);
  44          
  45          
  46          /*后台*/
  47          void main(void)
  48          {
  49   1          init();
  50   1          while(1)
  51   1          {
  52   2              switch (mode)           //任务切换
  53   2              {
  54   3                  case mode_dis_time: //显示时间
C51 COMPILER V9.54   MAIN                                                                  03/19/2018 16:55:19 PAGE 2   

  55   3                      TaskDisTime(); 
  56   3                      break;
  57   3                  
  58   3                  case mode_worring:  //警告
  59   3                      TaskWorring();
  60   3                      break;
  61   3                  
  62   3                  case mode_error:    //报警
  63   3                      TaskError();
  64   3                      break;
  65   3                  
  66   3                  case mode_dis_temp: //查询
  67   3                      TaskDisTemp();
  68   3                      break;
  69   3                  
  70   3                  case mode_set_temp: //设置
  71   3                      TaskSetTemp();
  72   3                      break;
  73   3              }
  74   2          }
  75   1      }
  76          
  77          /*前端显示*/
  78          void timer0(void) interrupt 1
  79          {
  80   1          switch (mode)
  81   1              {
  82   2                  case mode_dis_time:         //显示时间和亮第一个灯
  83   2                      dis_time(n_time.hour,
  84   2                               n_time.min,
  85   2                               n_time.sec);
  86   2                  
  87   2                      XBYTE[0X8000] = ~1;
  88   2                      break;
  89   2                  
  90   2                  case mode_worring:           //警告开继电器
  91   2                      dis_worring(1,
  92   2                                  w_time.min,
  93   2                                  w_time.sec);
  94   2                  
  95   2                      XBYTE[0X8000] = ~2;
  96   2                      XBYTE[0XA000] = 0X10; 
  97   2                      break;
  98   2                  
  99   2                  case mode_error:            //报警开蜂鸣器
 100   2                      dis_worring(2,
 101   2                                  e_time.min,
 102   2                                  e_time.sec);
 103   2                  
 104   2                      if(led_flash_flag)
 105   2                          XBYTE[0X8000] = ~4;
 106   2                      else
 107   2                          XBYTE[0X8000] = 0xff;
 108   2                      
 109   2                      XBYTE[0XA000] = 0X40; 
 110   2                      break;
 111   2                  
 112   2                  case mode_dis_temp:         //显示查询信息
 113   2                      if     (check_mode == 0)
 114   2                          dis_temp(tempurter.min,
 115   2                                   tempurter.max,
 116   2                                   tempurter.now);
C51 COMPILER V9.54   MAIN                                                                  03/19/2018 16:55:19 PAGE 3   

 117   2                      else if(check_mode == 1)//翻页
 118   2                          dis_worring(1,
 119   2                                      w_time.min,
 120   2                                      w_time.sec);
 121   2                      else if(check_mode == 2)
 122   2                          dis_worring(2,
 123   2                                      e_time.min,
 124   2                                      e_time.sec);
 125   2                      break;
 126   2                  
 127   2                  case mode_set_temp:         //设置报警温度
 128   2                      dis_set(tempurter.val[0],
 129   2                              tempurter.val[1],
 130   2                              tempurter.val[2],
 131   2                              tempurter.val[3],
 132   2                              tempurter.now,
 133   2                              smg_flash);
 134   2      
 135   2                      break;
 136   2              }
 137   1      }
 138          
 139          /*时基*/
 140          void timer1(void) interrupt 3
 141          {
 142   1          static uint one_sec_count[4]; 
 143   1          
 144   1          key_flag = key_on();
 145   1          
 146   1          one_sec_count[0]++;                 //led闪烁记时
 147   1          if     (one_sec_count[0] < 500)
 148   1              led_flash_flag = 0;
 149   1          else if(one_sec_count[0] >= 500 &&
 150   1                  one_sec_count[0] <= 1000  )
 151   1              led_flash_flag = 1;
 152   1          else if(one_sec_count[0] >1000)
 153   1              one_sec_count[0] = 0;
 154   1          
 155   1          if    (mode == mode_error)              //报警模式计时
 156   1          {
 157   2              if(one_sec_count[1]++ >=1000)
 158   2              {
 159   3                  one_sec_count[1] = 0;
 160   3                  if(e_time.sec<60)
 161   3                      e_time.sec++;
 162   3                  else
 163   3                  {
 164   4                      e_time.sec = 0;
 165   4                      if(e_time.min < 60)
 166   4                          e_time.min++;
 167   4                  }
 168   3                      
 169   3              }
 170   2          }
 171   1          else if(mode == mode_worring)       //警告模式记时
 172   1          {
 173   2              if(one_sec_count[2]++ >=1000)
 174   2              {
 175   3                  one_sec_count[2] = 0;
 176   3                  if(w_time.sec<60)
 177   3                      w_time.sec++;
 178   3                  else
C51 COMPILER V9.54   MAIN                                                                  03/19/2018 16:55:19 PAGE 4   

 179   3                  {
 180   4                      w_time.sec = 0;
 181   4                      if(w_time.min < 60)
 182   4                          w_time.min++;
 183   4                  }
 184   3                      
 185   3              }
 186   2          }
 187   1          else if(mode == mode_set_temp)          //数码管闪烁记时
 188   1          {
 189   2              one_sec_count[3]++;
 190   2              if     (one_sec_count[3] < 500)
 191   2                  smg_flash = 0;
 192   2              else if(one_sec_count[3] >= 500 &&
 193   2                      one_sec_count[3] <= 1000  )
 194   2                  smg_flash = tempurter.val_count;
 195   2              else if(one_sec_count[3] >1000)
 196   2                  one_sec_count[3] = 0;
 197   2          }
 198   1      }
 199          
 200          /*初始化*/
 201          void init(void)
 202          {
 203   1          borad_init();
 204   1          set_time();
 205   1          tim_init();
 206   1          tempurter.val[1] = 1;
 207   1          tempurter.val[2] = 5;
 208   1          tempurter.val[3] = 3;
 209   1          tempurter.val[4] = 0;
 210   1          tempurter.min = tempurter.val[1]*10+tempurter.val[2];
 211   1          tempurter.max = tempurter.val[3]*10+tempurter.val[4];
 212   1          tempurter.now = 22;
 213   1          tempurter.val_count = 1;
 214   1          EA = 1;
 215   1      }
 216          
 217          /*板初始化*/
 218          void borad_init(void)
 219          {
 220   1          XBYTE[0X8000] = 0XFF;
 221   1          XBYTE[0XA000] = 0;
 222   1          XBYTE[0XC000] = 0;
 223   1          XBYTE[0XE000] = 0;
 224   1      }
 225          
 226          /*定时器初始化*/
 227          void tim_init(void)
 228          {
 229   1          TH0 = (65536-2000)/256;
 230   1          TL0 = (65536-2000)%256;
 231   1          ET0 = 1;
 232   1          TR0 = 1;
 233   1          
 234   1          TH1 = (65536-1000)/256;
 235   1          TL1 = (65536-1000)%256;
 236   1          ET1 = 1;
 237   1          TR1 = 1;
 238   1      }
 239          
 240          /*显示时间任务*/
C51 COMPILER V9.54   MAIN                                                                  03/19/2018 16:55:19 PAGE 5   

 241          void TaskDisTime(void)
 242          {
 243   1          uchar key_number;
 244   1          //读出时间
 245   1          n_time.hour = read_ds1302(DS_R_HOUR);
 246   1          n_time.min =  read_ds1302(DS_R_MIN);
 247   1          n_time.sec =  read_ds1302(DS_R_SEC);
 248   1          //读出温度并对温度滤波
 249   1          tpbuf = get_temp();
 250   1          if(tpbuf < 85)
 251   1              tempurter.now = tpbuf;
 252   1          
 253   1          if     (tempurter.min <= tempurter.now &&
 254   1             tempurter.now <= tempurter.max)
 255   1              mode = mode_worring;
 256   1          else if(tempurter.now > tempurter.max)
 257   1              mode = mode_error;
 258   1          //切换按键
 259   1          if(key_flag == 1)
 260   1          {
 261   2              key_number = key_scanf();
 262   2              if     (key_number == 13)
 263   2                  mode = mode_set_temp;
 264   2              else if(key_number == 15)
 265   2                  mode = mode_dis_temp;
 266   2          }
 267   1      }
 268          
 269          /*警告任务*/
 270          void TaskWorring(void)
 271          {
 272   1          uchar key_number;
 273   1          /*退出警告*/
 274   1          if(key_flag == 1)
 275   1          {
 276   2              key_number = key_scanf();
 277   2              if     (key_number == 16)
 278   2              {
 279   3                  mode = mode_dis_time;
 280   3                  XBYTE[0XA000] = 0; 
 281   3                  XBYTE[0x8000] = 0xff;
 282   3              }
 283   2          }
 284   1      }
 285          
 286          /*报警任务*/
 287          void TaskError(void)
 288          {
 289   1          uchar key_number;
 290   1          //退出报警
 291   1          if(key_flag == 1)
 292   1          {
 293   2              key_number = key_scanf();
 294   2              if     (key_number == 16)
 295   2              {
 296   3                  mode = mode_dis_time;
 297   3                  XBYTE[0XA000] = 0; 
 298   3                  XBYTE[0x8000] = 0xff;
 299   3              }
 300   2              
 301   2          }
 302   1      }
C51 COMPILER V9.54   MAIN                                                                  03/19/2018 16:55:19 PAGE 6   

 303          
 304          /*查询任务*/
 305          void TaskDisTemp(void)
 306          {
 307   1          uchar key_number;
 308   1          //设置温度
 309   1      //    tempurter.min = tempurter.val[1]*10+tempurter.val[2];
 310   1      //    tempurter.max = tempurter.val[3]*10+tempurter.val[4];
 311   1          //读出温度并滤波
 312   1          tpbuf = get_temp();
 313   1          if(tpbuf < 85)
 314   1              tempurter.now = tpbuf;
 315   1          /*切换按键*/
 316   1          if(key_flag == 1)
 317   1          {
 318   2              key_number = key_scanf();
 319   2              
 320   2              if     (key_number == 16)
 321   2                  mode = mode_dis_temp;
 322   2              else if(key_number == 4)
 323   2              {
 324   3                  if(check_mode < 2)
 325   3                      check_mode++;
 326   3              }
 327   2              else if(key_number == 8)
 328   2              {
 329   3                  if(check_mode > 0)
 330   3                      check_mode--;
 331   3              }
 332   2              else if(key_number == 16)
 333   2              {
 334   3                  mode = mode_dis_time;
 335   3              }
 336   2          }
 337   1      }
 338          
 339          /*设置任务*/
 340          void TaskSetTemp(void)
 341          {
 342   1          uchar key_number;
 343   1          //查询温度
 344   1          tpbuf = get_temp();
 345   1          if(tpbuf < 85)
 346   1              tempurter.now = tpbuf;
 347   1          
 348   1          if(key_flag == 1)
 349   1          {
 350   2              key_number = key_scanf();
 351   2              
 352   2              switch(key_number)
 353   2              {
 354   3                  case 1:tempurter.val[tempurter.val_count] = 1;                  //1
 355   3                         if(tempurter.val_count<4)tempurter.val_count++;
 356   3                         break;
 357   3                  case 2:tempurter.val[tempurter.val_count] = 2;                  //2
 358   3                         if(tempurter.val_count<4)tempurter.val_count++;
 359   3                         break;
 360   3                  case 3:tempurter.val[tempurter.val_count] = 3;                  //3
 361   3                         if(tempurter.val_count<4)tempurter.val_count++;
 362   3                         break;
 363   3                  case 5:tempurter.val[tempurter.val_count] = 4;                  //4
 364   3                         if(tempurter.val_count<4)tempurter.val_count++;
C51 COMPILER V9.54   MAIN                                                                  03/19/2018 16:55:19 PAGE 7   

 365   3                         break;
 366   3                  case 6:tempurter.val[tempurter.val_count] = 5;                  //5
 367   3                         if(tempurter.val_count<4)tempurter.val_count++;
 368   3                         break;
 369   3                  case 7:tempurter.val[tempurter.val_count] = 6;                  //6
 370   3                          if(tempurter.val_count<4)tempurter.val_count++;
 371   3                          break;
 372   3                  case 9:tempurter.val[tempurter.val_count] = 7;                  //7
 373   3                          if(tempurter.val_count<4)tempurter.val_count++;
 374   3                          break;
 375   3                  case 10:tempurter.val[tempurter.val_count] = 8;                  //8
 376   3                          if(tempurter.val_count<4)tempurter.val_count++;
 377   3                          break;
 378   3                  case 11:tempurter.val[tempurter.val_count] = 9;                  //9
 379   3                          if(tempurter.val_count<4)tempurter.val_count++;
 380   3                          break;
 381   3                  case 12:                                                        //清除
 382   3                      tempurter.val[1] = tempurter.val[2] = tempurter.val[3] = tempurter.val[4] =0;
 383   3                      tempurter.val_count = 1;
 384   3                  case 14:tempurter.val[tempurter.val_count++] = 0;               //0
 385   3                          if(tempurter.val_count<4)tempurter.val_count++;
 386   3                          break;
 387   3                  case 16:tempurter.val_count =1;                                 //推出
 388   3                          mode = mode_dis_time;
 389   3                          //设置温度
 390   3                          tempurter.min = tempurter.val[1]*10+tempurter.val[2];
 391   3                          tempurter.max = tempurter.val[3]*10+tempurter.val[4];
 392   3                          break;
 393   3              }
 394   2          }
 395   1      }


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =   1173    ----
   CONSTANT SIZE    =   ----    ----
   XDATA SIZE       =   ----    ----
   PDATA SIZE       =   ----    ----
   DATA SIZE        =     30    ----
   IDATA SIZE       =   ----    ----
   BIT SIZE         =      2    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
